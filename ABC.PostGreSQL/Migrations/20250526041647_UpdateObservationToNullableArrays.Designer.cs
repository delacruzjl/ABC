// <auto-generated />
using System;
using ABC.Management.Domain.ValueObjects;
using ABC.PostGreSQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ABC.PostGreSQL.Migrations
{
    [DbContext(typeof(ABCContext))]
    [Migration("20250526041647_UpdateObservationToNullableArrays")]
    partial class UpdateObservationToNullableArrays
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ABC.Management.Domain.Entities.Antecedent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Antecedents");
                });

            modelBuilder.Entity("ABC.Management.Domain.Entities.Behavior", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Behaviors");
                });

            modelBuilder.Entity("ABC.Management.Domain.Entities.Child", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BirthYear")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("ABC.Management.Domain.Entities.ChildCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ChildConditions");
                });

            modelBuilder.Entity("ABC.Management.Domain.Entities.Consequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Consequences");
                });

            modelBuilder.Entity("ABC.Management.Domain.Entities.Observation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChildId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<DateTimeRange>("When")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.ToTable("Observations");
                });

            modelBuilder.Entity("AntecedentObservation", b =>
                {
                    b.Property<Guid>("AntecedentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ObservationsId")
                        .HasColumnType("uuid");

                    b.HasKey("AntecedentsId", "ObservationsId");

                    b.HasIndex("ObservationsId");

                    b.ToTable("AntecedentObservation");
                });

            modelBuilder.Entity("BehaviorObservation", b =>
                {
                    b.Property<Guid>("BehaviorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ObservationsId")
                        .HasColumnType("uuid");

                    b.HasKey("BehaviorsId", "ObservationsId");

                    b.HasIndex("ObservationsId");

                    b.ToTable("BehaviorObservation");
                });

            modelBuilder.Entity("ChildChildCondition", b =>
                {
                    b.Property<Guid>("ConditionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("childrenId")
                        .HasColumnType("uuid");

                    b.HasKey("ConditionsId", "childrenId");

                    b.HasIndex("childrenId");

                    b.ToTable("ChildChildCondition");
                });

            modelBuilder.Entity("ConsequenceObservation", b =>
                {
                    b.Property<Guid>("ConsequencesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ObservationsId")
                        .HasColumnType("uuid");

                    b.HasKey("ConsequencesId", "ObservationsId");

                    b.HasIndex("ObservationsId");

                    b.ToTable("ConsequenceObservation");
                });

            modelBuilder.Entity("ABC.Management.Domain.Entities.Observation", b =>
                {
                    b.HasOne("ABC.Management.Domain.Entities.Child", "Child")
                        .WithMany("Observations")
                        .HasForeignKey("ChildId");

                    b.Navigation("Child");
                });

            modelBuilder.Entity("AntecedentObservation", b =>
                {
                    b.HasOne("ABC.Management.Domain.Entities.Antecedent", null)
                        .WithMany()
                        .HasForeignKey("AntecedentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC.Management.Domain.Entities.Observation", null)
                        .WithMany()
                        .HasForeignKey("ObservationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BehaviorObservation", b =>
                {
                    b.HasOne("ABC.Management.Domain.Entities.Behavior", null)
                        .WithMany()
                        .HasForeignKey("BehaviorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC.Management.Domain.Entities.Observation", null)
                        .WithMany()
                        .HasForeignKey("ObservationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChildChildCondition", b =>
                {
                    b.HasOne("ABC.Management.Domain.Entities.ChildCondition", null)
                        .WithMany()
                        .HasForeignKey("ConditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC.Management.Domain.Entities.Child", null)
                        .WithMany()
                        .HasForeignKey("childrenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsequenceObservation", b =>
                {
                    b.HasOne("ABC.Management.Domain.Entities.Consequence", null)
                        .WithMany()
                        .HasForeignKey("ConsequencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC.Management.Domain.Entities.Observation", null)
                        .WithMany()
                        .HasForeignKey("ObservationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABC.Management.Domain.Entities.Child", b =>
                {
                    b.Navigation("Observations");
                });
#pragma warning restore 612, 618
        }
    }
}
